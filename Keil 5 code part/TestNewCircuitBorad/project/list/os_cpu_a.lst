


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       3 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : IAR EWARM
   17 00000000         ;*******************************************************
                       *************************************************
   18 00000000         
   19 00000000         ;*******************************************************
                       *************************************************
   20 00000000         ;                                           PUBLIC FUNCT
                       IONS
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   24 00000000                 EXTERN           OSPrioCur
   25 00000000                 EXTERN           OSPrioHighRdy
   26 00000000                 EXTERN           OSTCBCur
   27 00000000                 EXTERN           OSTCBHighRdy
   28 00000000                 EXTERN           OSIntNesting
   29 00000000                 EXTERN           OSIntExit
   30 00000000                 EXTERN           OSTaskSwHook
   31 00000000         
   32 00000000                 EXTERN           OSRdyGrp
   33 00000000                 EXTERN           OSRdyTbl
   34 00000000                 EXTERN           OSPrioHighRdy
   35 00000000         
   36 00000000         
   37 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   38 00000000                 EXPORT           OS_CPU_SR_Restore
   39 00000000                 EXPORT           OSStartHighRdy
   40 00000000                 EXPORT           OSCtxSw
   41 00000000                 EXPORT           OSIntCtxSw
   42 00000000                 EXPORT           OS_CPU_PendSVHandler
   43 00000000         
   44 00000000         ;    PUBLIC  OS_SchedNew
   45 00000000         
   46 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 2 


   47 00000000         ;                                                EQUATES
                       
   48 00000000         ;*******************************************************
                       *************************************************
   49 00000000         
   50 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   51 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   52 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   53 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   54 00000000         
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         
   59 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   60 00000000                 THUMB
   61 00000000                 REQUIRE8
   62 00000000                 PRESERVE8
   63 00000000         
   64 00000000         
   65 00000000         ;OS_SchedNew
   66 00000000         ;    PUSH   {R0-R4}
   67 00000000         ;    LDR    R0, =OSRdyGrp
   68 00000000         ;
   69 00000000         ;    LDRH   R2, [R0]
   70 00000000         ;    RBIT   R2, R2
   71 00000000         ;    CLZ    R2, R2                   ; y = CLZ(OSRdyGrp)
                       ;
   72 00000000         ;
   73 00000000         ;    LDR    R0, =OSRdyTbl
   74 00000000         ;    ADD    R1, R0, R2, LSL #0x01    ; ptbl = &OSRdyTbl[
                       y];
   75 00000000         ;
   76 00000000         ;    LDRH   R3, [R1]
   77 00000000         ;    RBIT   R3, R3
   78 00000000         ;    CLZ    R3, R3                   ; x = CLZ(*ptbl);
   79 00000000         ;
   80 00000000         ;    LDR    R0, =OSPrioHighRdy
   81 00000000         ;    ADD    R4, R3, R2, LSL #0x04
   82 00000000         ;    STRB   R4, [R0]                 ; OSPrioHighRdy = x
                        + (y << 4);
   83 00000000         ;



ARM Macro Assembler    Page 3 


   84 00000000         ;    POP    {R0-R4}
   85 00000000         ;    BX      LR
   86 00000000         
   87 00000000         
   88 00000000         
   89 00000000         ;*******************************************************
                       *************************************************
   90 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   91 00000000         ;
   92 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   93 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   94 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   95 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   96 00000000         ;              into the CPU's status register.
   97 00000000         ;
   98 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   99 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
  100 00000000         ;
  101 00000000         ;
  102 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  103 00000000         ;
  104 00000000         ;                 void Task (void *p_arg)
  105 00000000         ;                 {
  106 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  107 00000000         ;                     OS_CPU_SR  cpu_sr;
  108 00000000         ;                 #endif
  109 00000000         ;
  110 00000000         ;                          :
  111 00000000         ;                          :
  112 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  113 00000000         ;                          :
  114 00000000         ;                          :
  115 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  116 00000000         ;                          :
  117 00000000         ;                          :
  118 00000000         ;                 }
  119 00000000         ;*******************************************************
                       *************************************************
  120 00000000         
  121 00000000         OS_CPU_SR_Save
  122 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  123 00000004 B672            CPSID            I
  124 00000006 4770            BX               LR
  125 00000008         
  126 00000008         OS_CPU_SR_Restore
  127 00000008 F380 8810       MSR              PRIMASK, R0
  128 0000000C 4770            BX               LR



ARM Macro Assembler    Page 4 


  129 0000000E         
  130 0000000E         ;*******************************************************
                       *************************************************
  131 0000000E         ;                                          START MULTITA
                       SKING
  132 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  133 0000000E         ;
  134 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  135 0000000E         ;              the first task to start.
  136 0000000E         ;
  137 0000000E         ;           2) OSStartHighRdy() MUST:
  138 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  139 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  140 0000000E         ;              c) Set OSRunning to TRUE;
  141 0000000E         ;              d) Trigger PendSV exception;
  142 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  143 0000000E         ;*******************************************************
                       *************************************************
  144 0000000E         
  145 0000000E         OSStartHighRdy
  146 0000000E 481D            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  147 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  148 00000014 7001            STRB             R1, [R0]
  149 00000016         
  150 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  151 00000018 F380 8809       MSR              PSP, R0
  152 0000001C         
  153 0000001C 481A            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  154 0000001E 2101            MOVS             R1, #1
  155 00000020 7001            STRB             R1, [R0]
  156 00000022         
  157 00000022 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  158 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  159 00000028 6001            STR              R1, [R0]
  160 0000002A         
  161 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  162 0000002C         
  163 0000002C         OSStartHang
  164 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
  165 0000002E         
  166 0000002E         
  167 0000002E         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 5 


  168 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  169 0000002E         ;                                           void OSCtxSw
                       (void)
  170 0000002E         ;
  171 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  172 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  173 0000002E         ;*******************************************************
                       *************************************************
  174 0000002E         
  175 0000002E         OSCtxSw
  176 0000002E 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  177 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  178 00000034 6001            STR              R1, [R0]
  179 00000036 4770            BX               LR
  180 00000038         
  181 00000038         ;*******************************************************
                       *************************************************
  182 00000038         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  183 00000038         ;                                         void OSIntCtxS
                       w(void)
  184 00000038         ;
  185 00000038         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  186 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  187 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  188 00000038         ;*******************************************************
                       *************************************************
  189 00000038         
  190 00000038         OSIntCtxSw
  191 00000038 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  192 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  193 0000003E 6001            STR              R1, [R0]
  194 00000040 4770            BX               LR
  195 00000042         
  196 00000042         ;*******************************************************
                       *************************************************
  197 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  198 00000042         ;                                     void OS_CPU_PendSV
                       Handler(void)
  199 00000042         ;
  200 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  201 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  202 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only



ARM Macro Assembler    Page 6 


  203 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  204 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  205 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  206 00000042         ;
  207 00000042         ;           2) Pseudo-code is:
  208 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  209 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  210 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  211 00000042         ;              d) Call OSTaskSwHook();
  212 00000042         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  213 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  214 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  215 00000042         ;              h) Restore R4-R11 from new process stack;
                       
  216 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  217 00000042         ;
  218 00000042         ;           3) On entry into PendSV handler:
  219 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  220 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  221 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  222 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  223 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  224 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  225 00000042         ;
  226 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  227 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  228 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  229 00000042         ;*******************************************************
                       *************************************************
  230 00000042         
  231 00000042         OS_CPU_PendSVHandler
  232 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  233 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  234 00000048 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  235 0000004A         



ARM Macro Assembler    Page 7 


  236 0000004A 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  237 0000004C E880 0FF0       STM              R0, {R4-R11}
  238 00000050         
  239 00000050 490F            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  240 00000052 6809            LDR              R1, [R1]
  241 00000054 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  242 00000056         
  243 00000056         ; At this point, entire context of process has been save
                       d
  244 00000056         OS_CPU_PendSVHandler_nosave
  245 00000056 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  246 00000058 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  247 0000005A 4780            BLX              R0
  248 0000005C F85D EB04       POP              {R14}
  249 00000060         
  250 00000060 480D            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  251 00000062 490E            LDR              R1, =OSPrioHighRdy
  252 00000064 780A            LDRB             R2, [R1]
  253 00000066 7002            STRB             R2, [R0]
  254 00000068         
  255 00000068 4809            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  256 0000006A 490D            LDR              R1, =OSTCBHighRdy
  257 0000006C 680A            LDR              R2, [R1]
  258 0000006E 6002            STR              R2, [R0]
  259 00000070         
  260 00000070 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  261 00000072 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  262 00000076 3020            ADDS             R0, R0, #0x20
  263 00000078 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  264 0000007C F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  265 00000080 B662            CPSIE            I
  266 00000082 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  267 00000084         
  268 00000084                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 8 


              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\output
\os_cpu_a.d -o.\output\os_cpu_a.o -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PA
CK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.
2\Device\Include --list=.\list\os_cpu_a.lst ..\ucosii_port\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 59 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000002E

Symbol: OSCtxSw
   Definitions
      At line 175 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 40 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000038

Symbol: OSIntCtxSw
   Definitions
      At line 190 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 41 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002C

Symbol: OSStartHang
   Definitions
      At line 163 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 164 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 145 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 39 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000042

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 231 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 42 in file ..\ucosii_port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000056

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 244 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 234 in file ..\ucosii_port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 126 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 38 in file ..\ucosii_port\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 121 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 37 in file ..\ucosii_port\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 50 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 157 in file ..\ucosii_port\os_cpu_a.asm
      At line 176 in file ..\ucosii_port\os_cpu_a.asm
      At line 191 in file ..\ucosii_port\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 53 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 158 in file ..\ucosii_port\os_cpu_a.asm
      At line 177 in file ..\ucosii_port\os_cpu_a.asm
      At line 192 in file ..\ucosii_port\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 52 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 147 in file ..\ucosii_port\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 51 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 146 in file ..\ucosii_port\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 29 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 28 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 24 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 250 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 25 in file ..\ucosii_port\os_cpu_a.asm
      At line 34 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 251 in file ..\ucosii_port\os_cpu_a.asm
Warning: OSPrioHighRdy multiply definedComment: OSPrioHighRdy used once
OSRdyGrp 00000000

Symbol: OSRdyGrp
   Definitions
      At line 32 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      None
Comment: OSRdyGrp unused
OSRdyTbl 00000000

Symbol: OSRdyTbl
   Definitions
      At line 33 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      None
Comment: OSRdyTbl unused
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 23 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 153 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTCBCur
   Definitions
      At line 26 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 239 in file ..\ucosii_port\os_cpu_a.asm
      At line 255 in file ..\ucosii_port\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 27 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 256 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 30 in file ..\ucosii_port\os_cpu_a.asm
   Uses
      At line 246 in file ..\ucosii_port\os_cpu_a.asm
Comment: OSTaskSwHook used once
10 symbols
355 symbols in table
